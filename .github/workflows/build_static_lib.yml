name: Build QuickJS Static Libraries (Production Optimized)

on:
    workflow_dispatch:

jobs:
    linux-x86_64:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1
            - uses: jirutka/setup-alpine@v1
              with:
                  arch: x86_64
                  packages: "build-base make cmake"
            - name: Build Production Optimized Library
              shell: alpine.sh {0}
              run: |
                mkdir -p deps/libs/linux_amd64
                cd deps/quickjs
                
                # Clean previous builds
                make clean
                
                # Build with production optimizations
                # Override both CFLAGS_OPT and CFLAGS_NOLTO to ensure consistent flags
                make -e CONFIG_LTO=y \
                  CFLAGS_OPT="-g -Wall -MMD -MF .obj/\$$(@F).d -D_GNU_SOURCE -DCONFIG_VERSION=\\\"\$$(cat VERSION)\\\" -O3 -DNDEBUG -ffast-math -funroll-loops -fomit-frame-pointer -fstrict-aliasing -march=x86-64 -mtune=generic -flto" \
                  CFLAGS_NOLTO="-g -Wall -MMD -MF .obj/\$$(@F).d -D_GNU_SOURCE -DCONFIG_VERSION=\\\"\$$(cat VERSION)\\\" -O3 -DNDEBUG -ffast-math -funroll-loops -fomit-frame-pointer -fstrict-aliasing -march=x86-64 -mtune=generic" \
                  libquickjs.a
                
                # Verify library file
                file libquickjs.a
                size libquickjs.a
                
                mv libquickjs.a ../libs/linux_amd64/
            - name: Create PR
              uses: peter-evans/create-pull-request@v7
              with:
                  commit-message: "Update QuickJS Production Library - Linux x86_64"
                  branch-suffix: random
                  delete-branch: true
                  title: "QuickJS Production Optimized Library - Linux x86_64"
                  base: ${{ github.head_ref }}

    linux-aarch64:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1
            - uses: jirutka/setup-alpine@v1
              with:
                  arch: aarch64
                  packages: "build-base make cmake"
            - name: Build Production Optimized Library
              shell: alpine.sh {0}
              run: |
                mkdir -p deps/libs/linux_arm64
                cd deps/quickjs
                
                make clean
                
                # Build with production optimizations for ARM64
                make -e CONFIG_LTO=y \
                  CFLAGS_OPT="-g -Wall -MMD -MF .obj/\$$(@F).d -D_GNU_SOURCE -DCONFIG_VERSION=\\\"\$$(cat VERSION)\\\" -O3 -DNDEBUG -ffast-math -funroll-loops -fomit-frame-pointer -fstrict-aliasing -march=armv8-a -mtune=generic -flto" \
                  CFLAGS_NOLTO="-g -Wall -MMD -MF .obj/\$$(@F).d -D_GNU_SOURCE -DCONFIG_VERSION=\\\"\$$(cat VERSION)\\\" -O3 -DNDEBUG -ffast-math -funroll-loops -fomit-frame-pointer -fstrict-aliasing -march=armv8-a -mtune=generic" \
                  libquickjs.a
                
                file libquickjs.a
                size libquickjs.a
                
                mv libquickjs.a ../libs/linux_arm64/
            - name: Create PR
              uses: peter-evans/create-pull-request@v7
              with:
                  commit-message: "Update QuickJS Production Library - Linux aarch64"
                  branch-suffix: random
                  delete-branch: true
                  title: "QuickJS Production Optimized Library - Linux aarch64"
                  base: ${{ github.head_ref }}

    darwin_amd64:
        runs-on: macos-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1
            - name: Build Production Optimized Library
              run: |
                mkdir -p deps/libs/darwin_amd64
                cd deps/quickjs
                
                make clean
                
                # Build with production optimizations for macOS x86_64
                make -e CONFIG_LTO=y \
                  CFLAGS_OPT="-g -Wall -MMD -MF .obj/\$$(@F).d -D_GNU_SOURCE -DCONFIG_VERSION=\\\"\$$(cat VERSION)\\\" -O3 -DNDEBUG -ffast-math -funroll-loops -fomit-frame-pointer -fstrict-aliasing -mmacosx-version-min=12.0 -target x86_64-apple-macos12 -arch x86_64 -flto" \
                  CFLAGS_NOLTO="-g -Wall -MMD -MF .obj/\$$(@F).d -D_GNU_SOURCE -DCONFIG_VERSION=\\\"\$$(cat VERSION)\\\" -O3 -DNDEBUG -ffast-math -funroll-loops -fomit-frame-pointer -fstrict-aliasing -mmacosx-version-min=12.0 -target x86_64-apple-macos12 -arch x86_64" \
                  libquickjs.a
                
                file libquickjs.a
                size libquickjs.a
                
                mv libquickjs.a ../libs/darwin_amd64/
            - name: Create PR
              uses: peter-evans/create-pull-request@v7
              with:
                  commit-message: "Update QuickJS Production Library - macOS x86_64"
                  branch-suffix: random
                  delete-branch: true
                  title: "QuickJS Production Optimized Library - macOS x86_64"
                  base: ${{ github.head_ref }}

    darwin_arm64:
        runs-on: macos-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1
            - name: Build Production Optimized Library
              run: |
                mkdir -p deps/libs/darwin_arm64
                cd deps/quickjs
                
                make clean
                
                # Build with production optimizations for macOS ARM64
                make -e CONFIG_LTO=y \
                  CFLAGS_OPT="-g -Wall -MMD -MF .obj/\$$(@F).d -D_GNU_SOURCE -DCONFIG_VERSION=\\\"\$$(cat VERSION)\\\" -O3 -DNDEBUG -ffast-math -funroll-loops -fomit-frame-pointer -fstrict-aliasing -mmacosx-version-min=12.0 -target arm64-apple-macos12 -arch arm64 -mcpu=apple-a14 -flto" \
                  CFLAGS_NOLTO="-g -Wall -MMD -MF .obj/\$$(@F).d -D_GNU_SOURCE -DCONFIG_VERSION=\\\"\$$(cat VERSION)\\\" -O3 -DNDEBUG -ffast-math -funroll-loops -fomit-frame-pointer -fstrict-aliasing -mmacosx-version-min=12.0 -target arm64-apple-macos12 -arch arm64 -mcpu=apple-a14" \
                  libquickjs.a
                
                file libquickjs.a
                size libquickjs.a
                
                mv libquickjs.a ../libs/darwin_arm64/
            - name: Create PR
              uses: peter-evans/create-pull-request@v7
              with:
                  commit-message: "Update QuickJS Production Library - macOS ARM64"
                  branch-suffix: random
                  delete-branch: true
                  title: "QuickJS Production Optimized Library - macOS ARM64"
                  base: ${{ github.head_ref }}

    windows_386:
        runs-on: windows-2019
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1
            - name: Set up MinGW
              uses: egor-tensin/setup-mingw@v2.2.0
              with:
                  platform: x86
                  version: 12.2.0 
            - name: Build Production Optimized Library
              shell: bash
              run: |
                mkdir -p deps/libs/windows_386
                cd deps/quickjs
                
                make clean
                
                # Build with production optimizations for Windows x86
                make -e CONFIG_WIN32=y CONFIG_M32=y CONFIG_LTO=y \
                  'CFLAGS_OPT=-g -Wall -MMD -MF .obj/$(@F).d -D_GNU_SOURCE -DCONFIG_VERSION=\"$(shell cat VERSION)\" -D__USE_MINGW_ANSI_STDIO -O3 -DNDEBUG -ffast-math -funroll-loops -fomit-frame-pointer -fstrict-aliasing -march=i686 -mtune=generic -D_WIN32_WINNT=0x0601 -flto' \
                  'CFLAGS_NOLTO=-g -Wall -MMD -MF .obj/$(@F).d -D_GNU_SOURCE -DCONFIG_VERSION=\"$(shell cat VERSION)\" -D__USE_MINGW_ANSI_STDIO -O3 -DNDEBUG -ffast-math -funroll-loops -fomit-frame-pointer -fstrict-aliasing -march=i686 -mtune=generic -D_WIN32_WINNT=0x0601' \
                  libquickjs.a
                
                # Verify library file
                ls -la libquickjs.a
                
                cp libquickjs.a ../libs/windows_386/
            - name: Create PR
              uses: peter-evans/create-pull-request@v7
              with:
                  commit-message: "Update QuickJS Production Library - Windows x86"
                  branch-suffix: random
                  delete-branch: true
                  title: "QuickJS Production Optimized Library - Windows x86"
                  base: ${{ github.head_ref }}

    windows_amd64:
        runs-on: windows-2019
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1
            - name: Set up MinGW
              uses: egor-tensin/setup-mingw@v2.2.0
              with:
                  platform: x64
                  version: 12.2.0 
            - name: Build Production Optimized Library
              shell: bash
              run: |
                mkdir -p deps/libs/windows_amd64
                cd deps/quickjs
                
                make clean
                
                # Build with production optimizations for Windows x64
                make -e CONFIG_WIN32=y CONFIG_LTO=y \
                  'CFLAGS_OPT=-g -Wall -MMD -MF .obj/$(@F).d -D_GNU_SOURCE -DCONFIG_VERSION=\"$(shell cat VERSION)\" -D__USE_MINGW_ANSI_STDIO -O3 -DNDEBUG -ffast-math -funroll-loops -fomit-frame-pointer -fstrict-aliasing -march=x86-64 -mtune=generic -D_WIN32_WINNT=0x0601 -flto' \
                  'CFLAGS_NOLTO=-g -Wall -MMD -MF .obj/$(@F).d -D_GNU_SOURCE -DCONFIG_VERSION=\"$(shell cat VERSION)\" -D__USE_MINGW_ANSI_STDIO -O3 -DNDEBUG -ffast-math -funroll-loops -fomit-frame-pointer -fstrict-aliasing -march=x86-64 -mtune=generic -D_WIN32_WINNT=0x0601' \
                  libquickjs.a
                
                ls -la libquickjs.a
                
                cp libquickjs.a ../libs/windows_amd64/
            - name: Create PR
              uses: peter-evans/create-pull-request@v7
              with:
                  commit-message: "Update QuickJS Production Library - Windows x64"
                  branch-suffix: random
                  delete-branch: true
                  title: "QuickJS Production Optimized Library - Windows x64"
                  base: ${{ github.head_ref }}

    update_headers:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true
                  fetch-depth: 1
            - name: Copy Headers
              run: 
                cp -a deps/quickjs/*.h deps/include/
            - name: Create PR
              uses: peter-evans/create-pull-request@v7
              with:
                  commit-message: "Update QuickJS Header Files"
                  branch-suffix: random
                  delete-branch: true
                  title: "Update QuickJS Header Files"
                  base: ${{ github.head_ref }}

    validate_build:
        runs-on: ubuntu-latest
        needs: [linux-x86_64, linux-aarch64, darwin_amd64, darwin_arm64, windows_386, windows_amd64, update_headers]
        if: always()
        steps:
            - name: Validate Build Results
              run: |
                echo "Validating QuickJS production library builds..."
                
                # Check build results for each platform
                if [[ "${{ needs.linux-x86_64.result }}" == "success" ]]; then
                  echo "✅ Linux x86_64 build successful"
                else
                  echo "❌ Linux x86_64 build failed"
                fi
                
                if [[ "${{ needs.linux-aarch64.result }}" == "success" ]]; then
                  echo "✅ Linux aarch64 build successful"
                else
                  echo "❌ Linux aarch64 build failed"
                fi
                
                if [[ "${{ needs.darwin_amd64.result }}" == "success" ]]; then
                  echo "✅ macOS x86_64 build successful"
                else
                  echo "❌ macOS x86_64 build failed"
                fi
                
                if [[ "${{ needs.darwin_arm64.result }}" == "success" ]]; then
                  echo "✅ macOS ARM64 build successful"
                else
                  echo "❌ macOS ARM64 build failed"
                fi
                
                if [[ "${{ needs.windows_386.result }}" == "success" ]]; then
                  echo "✅ Windows x86 build successful"
                else
                  echo "❌ Windows x86 build failed"
                fi
                
                if [[ "${{ needs.windows_amd64.result }}" == "success" ]]; then
                  echo "✅ Windows x64 build successful"
                else
                  echo "❌ Windows x64 build failed"
                fi
                
                if [[ "${{ needs.update_headers.result }}" == "success" ]]; then
                  echo "✅ Header files updated successfully"
                else
                  echo "❌ Header files update failed"
                fi
                
                echo "Production optimized QuickJS libraries build process completed!"
